package com.todo.To_Do.SecurityConfig;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import java.net.http.HttpRequest;

@Configuration
public class Config {
    @Autowired
    private UserServiceImpl userService;
    @Autowired
    PasswordEncoderBean passwordEncoderBean;


    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http,AuthenticationManager authManager) throws Exception {
        http.csrf(csrf -> csrf.disable()).
               authorizeHttpRequests(auth->
                auth.requestMatchers("/todo/user/**").authenticated().
                        anyRequest().
                        permitAll()).
                 authenticationManager(authManager);

        http.httpBasic(Customizer.withDefaults()); // for postman

       return http.build();
    }
    @Bean
    public DaoAuthenticationProvider authProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userService);
        authProvider.setPasswordEncoder(passwordEncoderBean.passwordEncoder());
        return authProvider;
    }
    @Bean
    public AuthenticationManager authenticationManager() {
        return new ProviderManager(authProvider());
    }

}


